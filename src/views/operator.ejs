<!DOCTYPE html>
<html lang="es">
<!-- https://tincode.es/blog/manejo-de-salas-con-socket-io-y-react-hooks -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <%- include('includes/head') %>
    <link rel="stylesheet" href="/css/msg.css">

    <script type="module">
        import { io } from 'https://cdn.socket.io/4.3.2/socket.io.esm.min.js'

        const form = document.getElementById('form')

        // Funcion para imprimir mensajes
        const printMsg = (data) => {
            const chat = document.getElementById('chat-body')
            const div = document.createElement('div')
            if (data.username === user) {
                div.classList.add('msg', 'msg-own')
                div.innerHTML = `<span>Yo</span><p>${data.message}</p>`
            }else{
                div.classList.add('msg', 'msg-other')
                div.innerHTML = `<span>${data.username}</span><p>${data.message}</p>`
            }
            chat.appendChild(div)
            chat.scrollTop = chat.scrollHeight
        }

        // Variables
        let socket
        let roomSelected = null
        let chat = []
        let user = document.getElementById('user').value
        let start = false

        // Seleccionar usuario
        document.getElementById('user').addEventListener('change', (e) => user = e.target.value)

        // Funcion para cambiar de sala, limpiar el chat
        document.querySelector('.list-group').addEventListener('click', (e) => {
            document.getElementById('chat-body').innerHTML = '' // limpiar el chat

            const room = e.target.dataset.channel

            // Para evitar que se dupliquen las salas
            if (roomSelected === room) return console.log('Ya estas en esa sala')

            // Cambiar o iniciar la sala
            if (roomSelected) {
                switchRooms(roomSelected, room)
            }else{
                initiateSocket(room) // iniciar la sala con el nombre de la sala
            }

            roomSelected = room

            // Para darle estilos
            if (document.querySelector('.list-group-item.active')) {document.querySelector('.list-group-item.active').classList.remove('active')}
            e.target.classList.add('active')

            // unirse a la sala de chat si no esta conectado (una sola vez)
            if (!start) {
                console.log('Iniciando conexión...');
                
                subscribeToChat((err, data) => {
                    if (err) {return}
                    // chat = [data, ...chat]
                    printMsg(data)
                    // console.log(`Historial del chat: ${chat}`);
                })

                start = true
            }else{
                console.log('Ya estas conectado');
            }
            // return () => {
            //     disconnectSocket();
            // }
        })

        // Funcion para llamar a la funcion de desconectarce de la sala
        document.querySelector('.disconnect').addEventListener('click', (e) => {
            if (document.querySelector('.list-group-item.active')) {document.querySelector('.list-group-item.active').classList.remove('active')}
            disconnectSocket()
        })

        // Funcion para cambiar de sala
        const switchRooms = (prevRoom, nextRoom) => {
            if (socket) socket.emit('switch', { prevRoom, nextRoom })
        }

        // Funcion para iniciar la sala
        const initiateSocket = (room) => {
            socket = io()
            if (socket && room) {
                socket.emit('join',{room, user})
                console.log('Socket iniciado')
            }
        }

        // Funcion para desconectarse de la sala
        const disconnectSocket = () => {
            if(socket) {
                socket.disconnect()
                roomSelected = null
                console.log('Socket desconectado')
            };
        }

        // Funcion para escuchar los mensajes
        const subscribeToChat = (cb) => {
            if (!socket) return console.log('Socket no iniciado')
            console.log('Escuchando...');
            
            socket.on('chat', msg => {
                console.log('Websocket evento recivido!');
                return cb(null, msg)
            })
        }
        
        // Funcion para enviar mensajes
        const sendMessage = (msg) => {
            if (socket) {socket.emit('chat', { msg })}
        }

        // Llama a la funcion de enviar mensajes
        form.addEventListener('submit', (e) => {
            e.preventDefault()
            const msg = document.getElementById('msg')
            
            if (msg.value && roomSelected) {
                sendMessage(msg.value)
            }
            msg.value = ''
        })
    </script>
</head>

<body>
    <%- include('includes/nav') %>

    <main class="p-0 row m-0 px-1 px-md-3 justify-content-center bg-tertiary">

        <!-- sidebar - salas -->
        <aside class="col p-0 bg-body-tertiary">
            <header class="bg-primary py-3 text-center">
                <h4 class="fs-3 fw-light m-0 text-white">Salas</h4>
            </header>

            <div class="h-100 border-top border-end">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item list-group-item-action" data-channel="a">Sala 1</li>
                    <li class="list-group-item list-group-item-action" data-channel="b">Sala 2</li>
                    <li class="list-group-item list-group-item-action" data-channel="c">Sala 3</li>
                    <li class="list-group-item list-group-item-action" data-channel="d">Sala 4</li>
                </ul>
                <button class="btn btn-secondary mx-3 disconnect">Desconectar</button>
            </div>
        </aside>

        <!-- chat -->
        <section class="col-12 col-md-8 col-lg-8 p-0 bg-body-tertiary">
            <header class="bg-primary py-3 text-center">
                <h4 class="fs-3 fw-light m-0 text-white">Conversación</h4>
            </header>

            <section id="chat-body" class="msg-panel d-flex flex-column p-3 border-bottom">
            </section>

            <form class="input-group p-3" id="form">
                <button class="input-group-text" id="basic-addon1">
                    <i class="bi bi-send-fill text-secondary"></i>
                </button>
                <input type="text" class="form-control" placeholder="Enviar un mensaje" name="msg" id="msg">
                <div>
                    <select class="form-select" name="channel" id="user">
                        <option value="Angela">Angela</option>
                        <option value="Rebeca">Rebeca</option>
                        <option value="Elizabeth">Elizabeth</option>
                        <option value="Carlos">Carlos</option>
                    </select>
                </div>
            </form>
        </section>
    </main>

    <%- include('includes/footer') %>
</body>

</html>