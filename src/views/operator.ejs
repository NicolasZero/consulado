<!DOCTYPE html>
<html lang="es">
    <!-- https://www.consulado.gob.cl/consulado-contigo -->
    <!-- https://tincode.es/blog/manejo-de-salas-con-socket-io-y-react-hooks -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <%- include('includes/head') %>
    <link rel="stylesheet" href="/css/msg.css">

    <script type="module">
        import { io } from 'https://cdn.socket.io/4.3.2/socket.io.esm.min.js'

        const form = document.getElementById('form')

        
        // Funcion para imprimir mensajes
        const printMsg = (data) => {
            const chat = document.getElementById('chat-body')
            const div = document.createElement('div')
            if (data.username === user) {
                div.classList.add('msg', 'msg-own')
                div.innerHTML = `<span>Yo</span><p>${data.message}</p>`
            }else{
                div.classList.add('msg', 'msg-other')
                div.innerHTML = `<span>${data.username}</span><p>${data.message}</p>`
            }
            chat.appendChild(div)
            // chat.scrollTop = chat.scrollHeight
        }

        // Variables
        const socket = io({
            auth: {
                username: 'Operadora',
                ic: '0'
            }
        })

        if (socket) {
            console.log('Socket iniciado')
        }

        let roomSelected = null
        let chat = []
        const user = "Operadora"
        let start = false
        let rooms

        const reloadRooms = () => {
            socket.emit('rooms', 'all')
        }

        if (socket) {
            // socket.on('user', data => console.log(data))
            socket.on('rooms', data => {
                // if (data) return
                console.log(data);
                rooms = data
                list.innerHTML = ''
                const list = document.querySelector('.list-group')
                let a = 1
                for (let clave in data){
                    // console.log("valor: ",data[clave]);
                    const room = data[clave]
                    // console.log(a);
                    // a++
                    const li = document.createElement('li')
                    li.classList.add('list-group-item')
                    li.dataset.channel = room.ic
                    li.dataset.name = `${room.name} ${room.lastname}`
                    li.innerHTML = `${room.name} ${room.lastname}`
                    list.appendChild(li)
                }
                // data.forEach(room => {
                // })
            })
            reloadRooms()
        }

        const printRooms = ({name, lastname, ic}) => {
            const li = document.createElement('li')
            li.classList.add('list-group-item')
            li.dataset.channel = room.ic
            li.dataset.name = `${room.name} ${room.lastname}`
            li.innerHTML = `${room.name} ${room.lastname}`
            list.appendChild(li)
        }

        document.querySelector('.reload').addEventListener('click', reloadRooms)


        // Funcion para cambiar de sala, limpiar el chat
        document.querySelector('.list-group').addEventListener('click', (e) => {
            document.getElementById('chat-body').innerHTML = '' // limpiar el chat

            document.querySelector('.msg-box').classList.add('scroll')
            document.querySelector('.back').classList.remove('d-none')

            const room = e.target.dataset.channel
            const title = e.target.dataset.name

            // Verifica que existe la sala
            if (!room || !title) return console.log('Sala no valida')

            // Para evitar que se dupliquen las salas, verifica que no se haya seleccionado esa sala
            if (roomSelected === room) return console.log('Ya estas en esa sala')

            // Cambiar o iniciar la sala
            if (roomSelected) {
                // Si roomSelected existe, cambia la sala
                switchRooms(roomSelected, room)
                console.log('Sala cambiada');
            }else{
                // Si roomSelected no existe, Se une a la sala
                join(room) 

                subscribeToChat((err, data) => {
                    if (err) {return}
                    // chat = [data, ...chat]
                    printMsg(data)
                    // console.log(`Historial del chat: ${chat}`);
                })
            }

            roomSelected = room

            // Cargar los mensajes
            printMsg(rooms[room])

            // Para darle estilos
            if (document.querySelector('.list-group-item.active')) {
                document.querySelector('.list-group-item.active').classList.remove('active')
            }
            e.target.classList.add('active')

            // Cambiar el titulo
            document.getElementById('title').innerHTML = title
        })

        // Funcion para llamar a la funcion de desconectarce de la sala
        document.querySelector('.back').addEventListener('click', (e) => {
            if (document.querySelector('.list-group-item.active')) {
                document.querySelector('.list-group-item.active').classList.remove('active')
            }
            document.querySelector('.msg-box').classList.remove('scroll')
            document.querySelector('.back').classList.add('d-none')
            
            // disconnectSocket()
        })

        // Funcion para cambiar de sala
        const switchRooms = (prevRoom, nextRoom) => {
            if (socket) socket.emit('switch', { prevRoom, nextRoom })
        }

        // Funcion para iniciar la sala
        const join = (room) => {
            if (socket && room) {
                socket.emit('join',room)
            }
        }

        // Funcion para desconectarse de la sala
        const disconnectSocket = () => {
            if(socket) {
                socket.disconnect()
                roomSelected = null
                console.log('Socket desconectado')
            };
        }

        // Funcion para escuchar los mensajes
        const subscribeToChat = (cb) => {
            if (!socket) return console.log('Socket no iniciado')
            console.log('Escuchando...');
            
            socket.on('chat', msg => {
                console.log('Websocket chat recivido!');
                return cb(null, msg)
            }) 
        }
        
        // Funcion para enviar mensajes
        const sendMessage = (msg) => {
            if (socket) {socket.emit('chat', msg)}
        }

        // Llama a la funcion de enviar mensajes
        form.addEventListener('submit', (e) => {
            e.preventDefault()
            const msg = document.getElementById('msg')
            
            if (msg.value && roomSelected) {
                sendMessage(msg.value)
            }
            msg.value = ''
        })
    </script>
</head>

<body>
    <%- include('includes/nav') %>
    <!-- <button onclick="document.querySelector('main>div').classList.toggle('hu')">click</button> -->
    <main class="bg-tertiary px-0 px-md-3" style="overflow: hidden;">
        <div class="msg-box">
            <!-- sidebar - salas -->
            <aside class="bg-body-tertiary">
                <header class="bg-primary text-center">
                    <h4 class="fs-3 fw-light m-0 text-white">
                        Panel de Mensajes <i class="reload btn btn-primary bi bi-arrow-clockwise"></i>
                    </h4>
                </header>

                <div class="pt-1 border-end border-start msg-panel">
                    <ul class="list-group list-group-flush">
                        <!-- <li class="list-group-item list-group-item-action" data-name="Nicolas Zapata" data-channel="28076011">
                            <i class="bi bi-person-circle"></i> Nicolas Zapata <span class="badge text-bg-secondary">4</span>
                        </li>
                        <li class="list-group-item list-group-item-action" data-name="Maria Zapata" data-channel="28076012">
                            <i class="bi bi-person-circle"></i> Maria Zapata <span class="badge text-bg-secondary">4</span>
                        </li> -->
                        <!-- <p>No hay mensajes</p> -->
                    </ul>
                </div>
            </aside>

            <!-- chat -->
            <section class="bg-body-tertiary">
                <header class="bg-primary px-2">
                    <h4 class="fw-light fs-3 m-0 text-white">
                        <i class="btn btn-primary back bi bi-arrow-left d-none"></i>
                        <span id="title"></span>
                    </h4>
                </header>

                <section id="chat-body" class="msg-panel p-3 border-bottom">
                </section>

                <form class="input-group p-3" id="form">
                    <button class="input-group-text">
                        <i class="bi bi-send-fill text-secondary"></i>
                    </button>
                    <input type="text" class="form-control" placeholder="Enviar un mensaje" name="msg" id="msg">
                </form>
            </section>
        </div>
    </main>
    <%- include('includes/footer') %>
</body>
</html>